function DedicatedPEDSE = importDSE_PE(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   DEDICATEDPEDSE = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   DEDICATEDPEDSE = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   DedicatedPEDSE = importfile('Dedicated_PE_DSE_20190408_121722.csv', 2, 10840);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/04/08 13:45:26

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[4,5,6,8,12,14,17,18,19,20,26,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [4,5,6,8,12,14,17,18,19,20,26,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61]);
rawStringColumns = string(raw(:, [1,2,3,7,9,10,11,13,15,16,21,22,23,24,25,27,28,29,30,44,46,62]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,22]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
DedicatedPEDSE = table;
DedicatedPEDSE.DesignFileName = rawStringColumns(:, 1);
DedicatedPEDSE.config_input_port = categorical(rawStringColumns(:, 2));
DedicatedPEDSE.config_output_port = categorical(rawStringColumns(:, 3));
DedicatedPEDSE.decomposer = cell2mat(rawNumericColumns(:, 1));
DedicatedPEDSE.delay_fifo_depth = cell2mat(rawNumericColumns(:, 2));
DedicatedPEDSE.has_metaReusenum_reuse = cell2mat(rawNumericColumns(:, 3));
DedicatedPEDSE.has_metaReusevalid = categorical(rawStringColumns(:, 4));
DedicatedPEDSE.num_input_ports = cell2mat(rawNumericColumns(:, 4));
DedicatedPEDSE.instructions = categorical(rawStringColumns(:, 5));
DedicatedPEDSE.isDecomposed = categorical(rawStringColumns(:, 6));
DedicatedPEDSE.isShared = categorical(rawStringColumns(:, 7));
DedicatedPEDSE.module_id = cell2mat(rawNumericColumns(:, 5));
DedicatedPEDSE.module_type = categorical(rawStringColumns(:, 8));
DedicatedPEDSE.num_output_ports = cell2mat(rawNumericColumns(:, 6));
DedicatedPEDSE.output_select_mode = categorical(rawStringColumns(:, 9));
DedicatedPEDSE.protocol = categorical(rawStringColumns(:, 10));
DedicatedPEDSE.register_file_size = cell2mat(rawNumericColumns(:, 7));
DedicatedPEDSE.shared_slot_size = cell2mat(rawNumericColumns(:, 8));
DedicatedPEDSE.systemdata_word_width = cell2mat(rawNumericColumns(:, 9));
DedicatedPEDSE.systemnum_module = cell2mat(rawNumericColumns(:, 10));
DedicatedPEDSE.use_global = categorical(rawStringColumns(:, 11));
DedicatedPEDSE.mainFeature = categorical(rawStringColumns(:, 12));
DedicatedPEDSE.targetLibrary = categorical(rawStringColumns(:, 13));
DedicatedPEDSE.techFeature = categorical(rawStringColumns(:, 14));
DedicatedPEDSE.techSubFeature = categorical(rawStringColumns(:, 15));
DedicatedPEDSE.process = cell2mat(rawNumericColumns(:, 11));
DedicatedPEDSE.VTfeature = categorical(rawStringColumns(:, 16));
DedicatedPEDSE.techModel = categorical(rawStringColumns(:, 17));
DedicatedPEDSE.thresModel = categorical(rawStringColumns(:, 18));
DedicatedPEDSE.voltage = categorical(rawStringColumns(:, 19));
DedicatedPEDSE.temperature = cell2mat(rawNumericColumns(:, 12));
DedicatedPEDSE.period = cell2mat(rawNumericColumns(:, 13));
DedicatedPEDSE.mappedareaNumberofports = cell2mat(rawNumericColumns(:, 14));
DedicatedPEDSE.mappedareaNumberofcells = cell2mat(rawNumericColumns(:, 15));
DedicatedPEDSE.mappedareaNumberofcombinationalcells = cell2mat(rawNumericColumns(:, 16));
DedicatedPEDSE.mappedareaNumberofsequentialcells = cell2mat(rawNumericColumns(:, 17));
DedicatedPEDSE.mappedareaNumberofmacrosblackboxes = cell2mat(rawNumericColumns(:, 18));
DedicatedPEDSE.mappedareaNumberofbufinv = cell2mat(rawNumericColumns(:, 19));
DedicatedPEDSE.mappedareaNumberofreferences = cell2mat(rawNumericColumns(:, 20));
DedicatedPEDSE.mappedareaCombinationalarea = cell2mat(rawNumericColumns(:, 21));
DedicatedPEDSE.mappedareaBufInvarea = cell2mat(rawNumericColumns(:, 22));
DedicatedPEDSE.mappedareaNoncombinationalarea = cell2mat(rawNumericColumns(:, 23));
DedicatedPEDSE.mappedareaMacroBlackBoxarea = cell2mat(rawNumericColumns(:, 24));
DedicatedPEDSE.mappedareaNetInterconnectarea = rawStringColumns(:, 20);
DedicatedPEDSE.mappedareaTotalcellarea = cell2mat(rawNumericColumns(:, 25));
DedicatedPEDSE.mappedareaTotalarea = rawStringColumns(:, 21);
DedicatedPEDSE.mappedpowerCellInternalPower = cell2mat(rawNumericColumns(:, 26));
DedicatedPEDSE.mappedpowerNetSwitchingPower = cell2mat(rawNumericColumns(:, 27));
DedicatedPEDSE.mappedpowerTotalDynamicPower = cell2mat(rawNumericColumns(:, 28));
DedicatedPEDSE.mappedpowerTotal = cell2mat(rawNumericColumns(:, 29));
DedicatedPEDSE.mappedpowerCellLeakagePower = cell2mat(rawNumericColumns(:, 30));
DedicatedPEDSE.mappedpowerio_pad = cell2mat(rawNumericColumns(:, 31));
DedicatedPEDSE.mappedpowermemory = cell2mat(rawNumericColumns(:, 32));
DedicatedPEDSE.mappedpowerblack_box = cell2mat(rawNumericColumns(:, 33));
DedicatedPEDSE.mappedpowerclock_network = cell2mat(rawNumericColumns(:, 34));
DedicatedPEDSE.mappedpowerregister = cell2mat(rawNumericColumns(:, 35));
DedicatedPEDSE.mappedpowersequential = cell2mat(rawNumericColumns(:, 36));
DedicatedPEDSE.mappedpowercombinational = cell2mat(rawNumericColumns(:, 37));
DedicatedPEDSE.mappedtimingdataarrivaltime = cell2mat(rawNumericColumns(:, 38));
DedicatedPEDSE.mappedtimingdatarequiredtime = cell2mat(rawNumericColumns(:, 39));
DedicatedPEDSE.mappedtimingslack = cell2mat(rawNumericColumns(:, 40));
DedicatedPEDSE.designName = categorical(rawStringColumns(:, 22));

